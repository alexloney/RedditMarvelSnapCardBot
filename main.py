#!python

import datetime
import logging

from database import Database
from reddit_connet import RedditConnect
from comment_parser import CommentParser

logging.basicConfig(
    format='%(asctime)s %(levelname)-8s %(message)s',
    level=logging.INFO)
logging.captureWarnings(True)

if __name__ == '__main__':
    
    logging.info('Starting Reddit bot')

    # Variables, these can be moved to either ENV or CLI arguments
    subreddit = 'MarvelSnap'
    config_file = 'config.json'
    database_update_timeout = 60*60*24

    database = Database()

    # Perform our initial database update to get the first version of our card
    # lookups
    logging.info('Loading card lookup database')
    database.update_card_database()
    last_database_update = datetime.datetime.now()

    logging.info('Establishing Reddit connection (' + subreddit + ')')
    reddit_connect = RedditConnect(subreddit, config_file)

    # Continue forever...or untill killed
    try:
        while True:

            # Check the current date/time and compare it to the last time the
            # card lookup database has been updated. If it exceeds our set timeout
            # interval, update our internal card lookup database and reset our
            # last time we updated.
            current_time = datetime.datetime.now()
            if (current_time - last_database_update).total_seconds() > database_update_timeout:
                logging.info('Reloading card lookup database')
                database.update_card_database()
                last_database_update = datetime.datetime.now()

            # Fetch the next set of comments
            for comment in reddit_connect.get_comments_shallow():

                # Parse the comment and fetch the card names from it
                parser = CommentParser(comment)
                card_names = parser.parse()

                # Generate a response based on the detected card names in the
                # comment
                response = ''
                for name in card_names:
                    for item in database.search(name):
                        response += str(item)

                # If our response has a length, this means we identified a card
                # request and correctly matched it to a card to reply with. If
                # that is the case, we may proceed with the request
                if len(response) > 0:
                    response += '*Message generated by ' + reddit_connect.get_my_username() + '. Use syntax [[card_name]] to get a reply like this. Report any issues on [github](https://github.com/alexloney/RedditMarvelSnapCardBot).*'

                    logging.info('Detected comment: ' + comment.url)
                    
                    # Obtaining the authors is a more expensive operation, so we
                    # only do this at the very end before we submit the reply.
                    # In this case, we obtain the author names and verify that
                    # our username is not in a reply to this comment. This is to
                    # prevent us from replying to the same comment multiple times
                    authors = reddit_connect.get_comment_reply_author_names(comment.id)
                    if reddit_connect.get_my_username() not in authors:
                        logging.info('Submitting reply')
                        reddit_connect.add_reply(comment.id, response)

    except KeyboardInterrupt:
        pass


